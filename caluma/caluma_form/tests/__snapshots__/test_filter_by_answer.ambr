# name: test_query_all_questions[calculated_float-11.5-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'CONTAINS',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=calculated_float (CALCULATED_FLOAT): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'EXACT',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GTE',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GT',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ICONTAINS',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=calculated_float (CALCULATED_FLOAT): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'INTERSECTS',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=calculated_float (CALCULATED_FLOAT): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'IN',
            'question': 'calculated_float',
            'value': list([
              11.5,
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ISNULL',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LTE',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LT',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'STARTSWITH',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=calculated_float (CALCULATED_FLOAT): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'CONTAINS',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=calculated_float (CALCULATED_FLOAT): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'EXACT',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GTE',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GT',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ICONTAINS',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=calculated_float (CALCULATED_FLOAT): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'INTERSECTS',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=calculated_float (CALCULATED_FLOAT): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'IN',
            'question': 'calculated_float',
            'value': list([
              11.5,
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ISNULL',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LTE',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LT',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-11.5-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'STARTSWITH',
            'question': 'calculated_float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=calculated_float (CALCULATED_FLOAT): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'CONTAINS',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'EXACT',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'GTE',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): GTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'GT',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): GT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'ICONTAINS',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'INTERSECTS',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'IN',
            'question': 'choice',
            'value': list([
              'a',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'ISNULL',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'LTE',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): LTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'LT',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): LT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[choice-a-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'STARTSWITH',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'CONTAINS',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'EXACT',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'GTE',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): GTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'GT',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): GT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'ICONTAINS',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'INTERSECTS',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'IN',
            'question': 'choice',
            'value': list([
              'a',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'ISNULL',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'LTE',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): LTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'LT',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): LT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[choice-a-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'STARTSWITH',
            'question': 'choice',
            'value': 'a',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=choice (CHOICE): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'CONTAINS',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=date (DATE): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'EXACT',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GTE',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GT',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ICONTAINS',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=date (DATE): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'INTERSECTS',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=date (DATE): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'IN',
            'question': 'date',
            'value': list([
              '2018-05-09',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ISNULL',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LTE',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LT',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'STARTSWITH',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=date (DATE): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'CONTAINS',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=date (DATE): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'EXACT',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GTE',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GT',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ICONTAINS',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=date (DATE): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'INTERSECTS',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=date (DATE): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'IN',
            'question': 'date',
            'value': list([
              '2018-05-09',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ISNULL',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LTE',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LT',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[date-2018-05-09-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'STARTSWITH',
            'question': 'date',
            'value': '2018-05-09',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=date (DATE): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'CONTAINS',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'EXACT',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GTE',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GT',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ICONTAINS',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'INTERSECTS',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'IN',
            'question': 'datetime',
            'value': list([
              '2018-05-09T14:54:51.728786',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ISNULL',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LTE',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LT',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'STARTSWITH',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'CONTAINS',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'EXACT',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GTE',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GT',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ICONTAINS',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'INTERSECTS',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'IN',
            'question': 'datetime',
            'value': list([
              '2018-05-09T14:54:51.728786',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ISNULL',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LTE',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LT',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[datetime-2018-05-09T14:54:51.728786-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'STARTSWITH',
            'question': 'datetime',
            'value': '2018-05-09T14:54:51.728786',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Question matching query does not exist.', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'CONTAINS',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=float (FLOAT): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'EXACT',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GTE',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GT',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ICONTAINS',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=float (FLOAT): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'INTERSECTS',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=float (FLOAT): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'IN',
            'question': 'float',
            'value': list([
              11.5,
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ISNULL',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LTE',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LT',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'STARTSWITH',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=float (FLOAT): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'CONTAINS',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=float (FLOAT): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'EXACT',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GTE',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GT',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ICONTAINS',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=float (FLOAT): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'INTERSECTS',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=float (FLOAT): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'IN',
            'question': 'float',
            'value': list([
              11.5,
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ISNULL',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LTE',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LT',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[float-11.5-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'STARTSWITH',
            'question': 'float',
            'value': 11.5,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=float (FLOAT): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'CONTAINS',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=integer (INTEGER): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'EXACT',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GTE',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GT',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ICONTAINS',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=integer (INTEGER): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'INTERSECTS',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=integer (INTEGER): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'IN',
            'question': 'integer',
            'value': list([
              10,
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ISNULL',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LTE',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LT',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'STARTSWITH',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=integer (INTEGER): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'CONTAINS',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=integer (INTEGER): CONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'EXACT',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GTE',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GT',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ICONTAINS',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=integer (INTEGER): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'INTERSECTS',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=integer (INTEGER): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'IN',
            'question': 'integer',
            'value': list([
              10,
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ISNULL',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LTE',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LT',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[integer-10-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'STARTSWITH',
            'question': 'integer',
            'value': 10,
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=integer (INTEGER): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'CONTAINS',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'EXACT',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'GTE',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): GTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'GT',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): GT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'ICONTAINS',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'INTERSECTS',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'IN',
            'question': 'multiple_choice',
            'value': list([
              list([
                'a',
                'b',
              ]),
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): IN', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'ISNULL',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'LTE',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): LTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'LT',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): LT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'STARTSWITH',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'CONTAINS',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'EXACT',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'GTE',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): GTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'GT',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): GT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'ICONTAINS',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): ICONTAINS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'INTERSECTS',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'IN',
            'question': 'multiple_choice',
            'value': list([
              list([
                'a',
                'b',
              ]),
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): IN', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'ISNULL',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'LTE',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): LTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'LT',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): LT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-search_value0-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'lookup': 'STARTSWITH',
            'question': 'multiple_choice',
            'value': list([
              'a',
              'b',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=multiple_choice (MULTIPLE_CHOICE): STARTSWITH', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'CONTAINS',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'EXACT',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GTE',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): GTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GT',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): GT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ICONTAINS',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'INTERSECTS',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'IN',
            'question': 'text',
            'value': list([
              'foo',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ISNULL',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LTE',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): LTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LT',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): LT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'STARTSWITH',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'CONTAINS',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'EXACT',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GTE',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): GTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'GT',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): GT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ICONTAINS',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'INTERSECTS',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'IN',
            'question': 'text',
            'value': list([
              'foo',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'ISNULL',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LTE',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): LTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'LT',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=text (TEXT): LT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[text-foo-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'DIRECT',
            'lookup': 'STARTSWITH',
            'question': 'text',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'CONTAINS',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'EXACT',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GTE',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): GTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GT',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): GT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ICONTAINS',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'INTERSECTS',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'IN',
            'question': 'textarea',
            'value': list([
              'foo',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ISNULL',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LTE',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): LTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LT',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): LT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
            dict({
              'node': dict({
                'form': dict({
                  'slug': 'song-light',
                }),
              }),
            }),
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-matching-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'STARTSWITH',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-CONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'CONTAINS',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-EXACT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'EXACT',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-GTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GTE',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): GTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-GT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'GT',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): GT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-ICONTAINS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ICONTAINS',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-INTERSECTS]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'INTERSECTS',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): INTERSECTS', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-IN]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'IN',
            'question': 'textarea',
            'value': list([
              'foo',
            ]),
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-ISNULL]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'ISNULL',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-LTE]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LTE',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): LTE', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-LT]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'LT',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': None,
      }),
      'errors': "[GraphQLError('Invalid lookup for question slug=textarea (TEXTAREA): LT', locations=[SourceLocation(line=3, column=11)], path=['allDocuments'])]",
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-None]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
# name: test_query_all_questions[textarea-foo-nomatch-STARTSWITH]
  dict({
    'request': dict({
      'query': '''
        
                query asdf ($hasAnswer: [HasAnswerFilterType]!) {
                  allDocuments(filter: [{hasAnswer: $hasAnswer}]) {
                    edges {
                      node {
                        form {
                          slug
                        }
                      }
                    }
                  }
                }
            
      ''',
      'variables': dict({
        'hasAnswer': list([
          dict({
            'hierarchy': 'FAMILY',
            'lookup': 'STARTSWITH',
            'question': 'textarea',
            'value': 'foo',
          }),
        ]),
      }),
    }),
    'response': dict({
      'data': dict({
        'allDocuments': dict({
          'edges': list([
          ]),
        }),
      }),
      'errors': 'None',
    }),
  })
# ---
